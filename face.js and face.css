// src/components/Face.js
import React, { useEffect, useRef, useState } from 'react';
import Dropzone from 'react-dropzone';
import Webcam from 'react-webcam';
import * as faceapi from 'face-api.js';
import './Face.css';

const Face = () => {
  const [imageSrc, setImageSrc] = useState(null);
  const [detections, setDetections] = useState([]);
  const [modelsLoaded, setModelsLoaded] = useState(false);
  const webcamRef = useRef(null);

  useEffect(() => {
    const loadModels = async () => {
      await Promise.all([
        faceapi.nets.tinyFaceDetector.loadFromUri('/models'),
        faceapi.nets.faceLandmark68Net.loadFromUri('/models'),
        faceapi.nets.faceRecognitionNet.loadFromUri('/models'),
        faceapi.nets.ssdMobilenetv1.loadFromUri('/models'), // Load SSD MobileNet model
      ]);
      setModelsLoaded(true);
    };
    loadModels();
  }, []);

  const handleImageUpload = (acceptedFiles) => {
    if (acceptedFiles && acceptedFiles.length > 0) {
      const imageFile = acceptedFiles[0];
      const reader = new FileReader();
      reader.onload = () => {
        setImageSrc(reader.result);
        detectFaces(reader.result);
      };
      reader.readAsDataURL(imageFile);
    }
  };

  const captureImage = () => {
    const imageSrc = webcamRef.current.getScreenshot();
    setImageSrc(imageSrc);
    detectFaces(imageSrc);
  };

  const detectFaces = async (source) => {
    if (modelsLoaded && source) {
      const img = await faceapi.fetchImage(source);
      const detectedFaces = await faceapi.detectAllFaces(img).withFaceLandmarks().withFaceDescriptors();
      setDetections(detectedFaces);
    }
  };

  return (
    <div className="face-container">
      <h1>Face Detection & Recognition</h1>
      <div className="dropzone-container">
        <Dropzone onDrop={handleImageUpload} accept="image/*">
          {({ getRootProps, getInputProps }) => (
            <div className="dropzone" {...getRootProps()}>
              <input {...getInputProps()} />
              <p>Drag &amp; drop an image here, or click to select one</p>
            </div>
          )}
        </Dropzone>
        <button className="capture-button" onClick={captureImage}>Capture Image</button>
        <Webcam
          audio={false}
          ref={webcamRef}
          screenshotFormat="image/jpeg"
          className="webcam"
        />
      </div>
      <div className="image-container">
        {imageSrc && <img src={imageSrc} alt="Uploaded" />}
        {detections.map((detection, index) => (
          <div
            key={index}
            className="face-box"
            style={{
              left: detection.box.left,
              top: detection.box.top,
              width: detection.box.width,
              height: detection.box.height,
            }}
          ></div>
        ))}
      </div>
    </div>
  );
};
export default Face;




/* src/components/face.css */
.face-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    margin-top: 2rem;
  }
  
  .dropzone-container {
    display: flex;
    flex-direction: column;
    align-items: center;
  }
  
  .dropzone {
    border: 2px dashed #ccc;
    padding: 1rem;
    width: 300px;
    text-align: center;
    cursor: pointer;
  }
  
  .capture-button {
    margin-top: 1rem;
    padding: 0.5rem 1rem;
    background-color: #007bff;
    color: white;
    border: none;
    cursor: pointer;
  }
  
  .webcam {
    margin-top: 1rem;
    border: 2px solid #ccc;
  }
  
  .image-container {
    margin-top: 2rem;
    position: relative;
  }
  
  .face-box {
    position: absolute;
    border: 2px solid #f00;
    box-shadow: 0 0 10px #f00;
    pointer-events: none;
  }
  
